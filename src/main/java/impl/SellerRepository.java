package impl;

import java.sql.Connection;
import java.sql.SQLException;

import domain.Seller;
import mappers.IMapper;
import uow.IUnitOfWork;
import repositories.ISellerRepository;

public class SellerRepository extends RepositoryBase<Seller> implements ISellerRepository {

	protected SellerRepository(Connection connection, IMapper<Seller> mapper, IUnitOfWork uow) throws SQLException {
		super(connection, mapper, uow);
	}

	protected String createTableSql() {
		return "CREATE TABLE seller("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "name VARCHAR(20),"
				+ "sellerType VARCHAR(20),"
				+ "phone VARCHAR(20),"
				+ "email VARCHAR(20)"
				+ ")";
	}

	@Override
	protected String getTableName() {
		return "seller";
	}

	@Override
	protected String getInsertSql() {
		return "INSERT INTO seller(name, sellerType, phone, email) VALUES(?,?,?,?)";
	}

	@Override
	protected String getUpdateSql() {
		return "UPDATE seller SET (name, sellerType, phone, email)=(?,?,?,?) WHERE id=?";
	}

	@Override
	protected void setInsert(Seller seller) throws SQLException {
		insert.setString(1, seller.getName());
		insert.setString(2, seller.getSellerType().toString());
		insert.setString(3, seller.getPhone());
		insert.setString(4, seller.getEmail());
		
	}

	@Override
	protected void setUpdate(Seller seller) throws SQLException {
		update.setString(1, seller.getName());
		update.setString(2, seller.getSellerType().toString());
		update.setString(3, seller.getPhone());
		update.setString(4, seller.getEmail());
		update.setInt(5, seller.getId());
	}


}
